#!/usr/bin/perl -w

# written by andrewt@cse.unsw.edu.au April 2011
# as a starting point for COMP2041/9041 assignment 2
# http://cgi.cse.unsw.edu.au/~cs2041/11s1/wordsquash/
# Its a crude implementation which provides some basic features
# You will need to modify and add to this code.
# This codes has bugs & security holes

use CGI qw/:all/;
use CGI::Carp qw(fatalsToBrowser warningsToBrowser);
use List::Util qw/max/;

sub action_list_blogs();
sub action_display_blog();
sub action_edit_commenting();
sub create_blog();
sub save_posting();
sub markup_to_HTML($);
sub get_html_template($);
sub read_file($);
sub write_file($$);
sub check_post_title_exists($);

# This HTML could be in a template file but it assists debugging to have it output ASAP
print header,"<html><head><title>WordSquash</title></head><body>\n";
# Leave parameters in a HTML comment for debugging
print "<!-- ".join(",", map({"$_='".param($_)."'"} param()))."-->\n";

print join(",", map({"$_='".param($_)."'"} param())),"<p>";

my $action = param('action') || 'login';
my $blog = param('blog') || '';
my $post = param('post') || '';
my $postContent = param('postContent') || '';
my $user_name = param('username') || '';
my $user_PST = param('userPST')|| '';
$url = "http://cgi.cse.unsw.edu.au/~cbwa548/ass2/wordsquash.cgi";

   

$blog =~ s/[^a-zA-Z0-9\-]//g;



$data_dir = "./data";
mkdir $data_dir if !-d $data_dir;

my %attributes = (
	URL => url(),
	BLOG_HOST_NAME => WordSquash,
	BLOG => $blog,
	POST_TITLE =>$post,
	POST_CONTENT =>$postContent,
	USER =>$user_name,
	USERPST => $user_PST,
	BLOG_TITLE => param(new_blog_title) || read_file("$data_dir/$user_PST.$blog.blog_title")
	
);


print get_html_template("$action.start.template");
&{"action_$action"}() if defined &{"action_$action"};
print get_html_template("$action.end.template");
print "</body></html>\n";
exit(0);

sub action_login() {
print"<p>action_login<p>";
print"<a href='$url?blog=$blog&action=register'>Register</a>"
}

sub action_register() {
print"action_register<p>";
}

sub action_login_result() {
     print"<p>action_result<p>";
     
        my $TempName = param(username);
        $TempName =~ s/[^0-9A-Za-z_]//g;
        param('username',$TempName);            #for safty reason get rid of all irellavent carractor
        $user_name = param('username') || '';
        
        $TempPW = param(password);
        $TempPW =~ s/[^0-9A-Za-z_]//g;
        param('password',$TempPW);              #for safty reason get rid of all irellavent carractor

       if (!check_password_correct(param(username))) {
	     print "<p><font color=\'red\'><b>(login failed)not valid name and password</b></font><p>";
	     print"<a href='$url?action=login'>Try again</a>";
         
       }else{
         print "<p>login successful<p>";
         print"<input type='hidden' name='action' value='list_blogs'>";
         print"<input type='hidden' name='username' value= param(username)>";
         param('username',$user_name);

         print"<a href='$url?action=list_blogs&username=$user_name'>View Blogs</a>"; 
    }
}

sub action_regist_result() {
print"action_regist_result<p>";
	if (param(username) ne '' && param(password) ne ''&& param(email) ne ''){  
	    save_regist();
	    print "<p>regist successful<p>";
	    print "<p><a href='$url?action=login'>Login</a><br>";
	}else{
	    print"<p><font color=\'red\'><b>(regist failed) missing or conflict clomloms plz Register again</b></font><p>";
	    print"<a href='$url?blog=$blog&action=register'>Register Again</a>"
	}
}


# List blogs
sub action_list_blogs() {
print"action_list_blogs<p>";

print"<br><br>my blogs<br>";
	foreach my $blog (sort glob " $data_dir/$user_name.*.blog_title") {
	
		($attributes{BLOG} = $blog) =~ s/\.blog_title$//;		       
		($attributes{BLOG} = $attributes{BLOG}) =~ s/$data_dir\/$user_name\.//;
		 $attributes{USERPST} = $user_name;	
		 $attributes{USER} = $user_name;
		            
		$attributes{BLOG_TITLE} = read_file("$blog");
		print get_html_template('list_blogs.blog.template');		
	}
	
	print"<br><br><br><br><br>View others blogs<br>";
    foreach my $blog (sort glob "$data_dir/*.*.blog_title") {
       if ($blog !~ "$data_dir/$user_name.*.blog_title"){
        if ($blog =~ /\/data\/([^.]*).([^.]*).blog_title/){
              $user_PST = $1;
              $blog_name = $2;                  
        }        
		($attributes{BLOG} = $blog) =~ s/\.blog_title$//;		       
        ($attributes{BLOG} = $attributes{BLOG}) =~ s/$data_dir\/$user_PST\.//;
		$attributes{USER} = $user_name;
		$attributes{USERPST} = $user_PST;		            
		$attributes{BLOG_TITLE} = read_file("$blog");
		print get_html_template('list_blogs.blog.template');
       }
	} 
	print "</ul><p><a href='$url?blog=$blog&action=new_blog&username=$user_name'>Create a new blog</a><br>";

	

}

# Display a blog's contents
sub action_display_blog() {
print"action_display_blog<p>\n";

	create_blog() if (defined param(new_blog_title));
	save_posting() if defined param(new_posting_contents);
    save_edit_posting() if defined param(edit_posting_contents);
    delete_post() if defined param(delete_posting);    


	foreach my $post (sort glob "$data_dir/*.$user_PST.$blog.*.post") {

		$attributes{POST_TITLE} = read_file("${post}_title");       
		$attributes{POST_CONTENT} = markup_to_HTML(read_file($post));
		
	     		
		$post =~ /(\d{12})\W+([^\W]*).*/;
		$attributes{TIME} = $1;
		$attributes{PEOPLE} = $2;

        my $tempPostTitle = read_file("${post}_title");
           $tempPostTitle =~ s/\s+/_/g; 
	    my $last_comment = max(map(/(\d+).comment/, glob("$data_dir/*.$blog.$tempPostTitle.*.comment")));


		$attributes{N_COMMENTS} = ($last_comment || 0);
		
				
		print get_html_template("display_blog.post.template");
		if($user_PST eq $user_name){
		    print get_html_template("print_posting_delete.template");
		    print get_html_template("print_posting_edit.template");
        }
	}
	if($user_PST eq $user_name){
	 print "</ul><p><a href='$url?blog=$blog&action=new_posting&username=$user_name&userPST=$user_PST'>Create a new blog post</a>";
	 
    }
}


sub action_edit_posting() {


    $attributes{POST_TITLE} = $post;
    $attributes{USERPST} = $user_name;
    
    foreach my $temp (sort glob "$data_dir/*.$user_name.$blog.*.post_title") {
        my $buffer = markup_to_HTML(read_file("${temp}"));
        if ($post =~ $buffer){
           $temp =~ s/_title$//;
		   $attributes{POST_CONTENT} = markup_to_HTML(read_file("${temp}"));
		}
    }		
    print get_html_template("edit_posting.post.template");
}

sub action_edit_commenting() {  

    my $location = param('location');
    $attributes{LOCATION} = $location;
    
    $attributes{COMMENT} = read_file("${location}");
		
    print get_html_template("edit_commenting.post.template");
}

sub action_comment_posting() {

    save_comment() if defined param(new_comment);
    save_edit_comment() if defined param(edit_comment);
    delete_coment() if defined param(delete_comment);    
   
   print"Thats comment page<p>";
   
    my $tempPostTitle = $post;
       $tempPostTitle =~ s/\s+/_/g;
    
   foreach my $comment (sort glob "$data_dir/*.$blog.$tempPostTitle.*.comment") {

		$attributes{COMMENT} = markup_to_HTML(read_file($comment));
		$comment =~ /(\d{12})\W+([^\W]*).*/;
		$attributes{TIME} = $1;
		$attributes{PEOPLE} = $2;
		$people = $attributes{PEOPLE};
					
		print get_html_template("display_comment.post.template");	
		if($user_name eq $people){
		    $attributes{LOCATION} = $comment;
		    print get_html_template("print_comment_delete.template");
		    print get_html_template("print_comment_edit.template");		    
        }
	}
}



sub create_blog() {
print"create_blog<p>\n";
    $user_PST = $user_name;
    $attributes{USER} = $user_name;
    $attributes{USERPST} = $user_name;
    $blog =~ s/[^0-9A-Za-z_]//g;
    param('blog', $blog);
	write_file("$data_dir/$user_name.$blog.blog_title", param(new_blog_title));
}


sub save_regist(){
print"save_regist<p>";
    my $user_name = param(username);
       if($user_name =~ /[^0-9A-Za-z_]/){
           print "<p><font color=\'red\'><b>regist failed invalid 
                        User name caractor only use 0-9 A-Z a-z _</b></font><p>";
           print "<p><a href='$url?action=register'>Register again</a><br>";
           exit(1);
       }
    my $file = sprintf "$user_name.information";


    if(!check_user_name_exists(param(username))){
        my $password = param(password);
           if($password =~ /[^0-9A-Za-z_]/){
                print "<p><font color=\'red\'><b>regist failed invalid 
                        password caractor only use 0-9 A-Z a-z _</b></font><p>";
                print "<p><a href='$url?action=register'>Register again</a><br>";
                exit(1);
            }
        my $email = param(email);
           if( $email =~ /[^0-9A-Za-z_\@\.]/){
                print "<p><font color=\'red\'><b>regist failed invalid 
                        email caractor only use 0-9 A-Z a-z _ @ .</b></font><p>";
                print "<p><a href='$url?action=register'>Register again</a><br>";
                exit(1);
            } 
	    write_file("$data_dir/$file", $password);
	    write_file("$data_dir/${file}_email", $email);	    
	}else{
        print "<p><font color=\'red\'><b>username already exist change another one</b></font><p>";
        print "<p><a href='$url?action=register'>Register again</a><br>";
		exit(1);		
	}

}

sub delete_post() {

    $attributes{POST_TITLE} = $post;
    $attributes{USERPST} = $user_name;
    
    foreach my $temp (sort glob "$data_dir/*.$user_name.$blog.*.post_title") {
        my $buffer = markup_to_HTML(read_file("${temp}"));
        if ($post =~ $buffer){          
		   `rm $temp`;
		    $temp =~ s/_title$//;
		   `rm $temp`;
		   print "deleted $buffer";
		}
    }		
}

sub delete_coment(){
    my $location = param(location);  
    print "comment deleted<p>$location<p>";
	`rm $location`;
}

sub save_posting() {
print"save_posting<p>";
	
    my $time = `date +%Y%m%d%H%M`;
	my $last_post = max(map(/(\d+).post$/, glob("$data_dir/*.$user_name.$blog.*.post")));

	my $file = sprintf "$time.$user_name.$blog.%d.post", ($last_post || 0) + 1;
	   $file =~ s/\s*//g;

    my $tempContents = param(new_posting_contents);
    $tempContents =~ s/<\\?>//g;
    my $tempTitle = param(new_posting_title);
    $tempTitle =~ s/<\\?>//g;
    if(!check_post_title_exists($tempTitle)){

	    write_file("$data_dir/$file", $tempContents);
	    write_file("$data_dir/${file}_title", $tempTitle);
	}else{
	    $attributes{POST_TITLE} = $tempTitle;       
		$attributes{POST_CONTENT} = $tempContents;
		print get_html_template("rename.template");
		exit(0);		
	}
}


sub save_edit_comment() {
    my $location = param(location);
    my $tempComment = param(edit_comment);
    $tempComment =~ s/<\\?>//g;    
	write_file("$location", $tempComment);		        
     
}

sub save_edit_posting() {


    my $post = $attributes{POST_TITLE};
    foreach my $temp (sort glob "$data_dir/*.$user_name.$blog.*.post_title"){
        my $buffer = markup_to_HTML(read_file("${temp}"));
        if ($post =~ $buffer){
           $temp =~ s/_title$//;           
           write_file("${temp}", param(edit_posting_contents));
		}
    }		
}




sub check_post_title_exists($) {
    my ($title) = @_;
    foreach my $temp (sort glob "$data_dir/*.$user_name.$blog.*.post_title") {
        my $buffer = markup_to_HTML(read_file("${temp}"));
        if ($title =~ /^$buffer$/){
            return 1;     
        }
	}
    return 0;
}


sub check_user_name_exists($) {
    my ($user_name) = @_;
    foreach my $temp (sort glob "$data_dir/*.information") {        
        $temp =~ s/\.\/data\///;
        $temp =~ s/\.information//;
        if ($user_name =~ /^$temp$/){
            return 1;     
        }
	}
    return 0;
}

sub check_password_correct($) {
    my ($user_name) = @_;

    my $password = read_file("$data_dir/$user_name.information");

    if ($password eq param(password)){
        return 1;
    }
    
    return 0;
}



sub save_comment(){

print"save_comment<p>";
    my $tempPostTitle = $post;
       $tempPostTitle =~ s/\s+/_/g;
    my $time = `date +%Y%m%d%H%M`;
 
	my $last_comment = max(map(/(\d+).comment/, glob("$data_dir/*.$blog.$tempPostTitle.*.comment"))); 
	my $file = sprintf "$time.$user_name.$blog.$tempPostTitle.%d.comment",($last_comment || 0) + 1;
	$file =~ s/\s//g;
	write_file("$data_dir/$file", param(new_comment));		
}


# convert markup language to HTML
# Markup language is http://en.wikipedia.org/wiki/BBCode 
sub markup_to_HTML($) {

	my ($text) = @_;
	$text =~ s/\[(\/?[bius])\]/<$1>/gi;
	$text =~ s/\[(\/?(url|img|quote|code|table|tr|td))\]/<$1>/gi;
	$text =~ s/\[size=(\d+)\]([^\[]*)\[\/size\]/<span style="font-size:$1px">$2<\/span>/gi; 


	$text =~ s/\[color=?(\w{2}\d{4})\]([^\[]*)\[\/color\]/<span style="color:#$1">$2<\/span><font color="#$1">$2<\/font>/gi;
	if ($text =~ /\[color=(\w+)\]([^\[]*)\[\/color\]/i){
		$a = "FF0000";
		$text =~ s/\[color=(\w+)\]([^\[]*)\[\/color\]/<span style="color:#$a">$2<\/span><font color="#$a">$2<\/font>/gi;
	}                                    #To-do this is just red color not yet implement the others, need a table of hex then implement them.

	$text =~ s/\[\*\]([^\[]*)/<li>$1<\/li>/gi; 
	$text =~ s/\[\/list\]/<\/ul>/gi;
	$text =~ s/\[list\]/<ul>/gi;  

	return $text;
}


# read a template and replace any occurences of $identifier with $attributes{$identifier}
sub get_html_template($) {
	my ($file) = @_;
	return "<p><font color=\"white\"><b>MISSING TEMPLATE BUT Thats allright $file</b></font><p>" if !-r $file;
	my $html = read_file($file);
	$html =~ s/\$(\w+)/defined $attributes{$1} ? $attributes{$1} : "\$$1"/eg;
	return  "<!-- $file begin -->\n$html<!-- $file end -->\n";
}

sub read_file($) {
	my ($file) = @_;
    open(my $f, '<', $file) or return undef;
    return do {local $/; <$f>}
}

sub write_file($$) {
	my ($file, $contents) = @_;
    open my $f, '>', $file or die "Can not write '$file': $!";
    print $f $contents if defined $f;
}
