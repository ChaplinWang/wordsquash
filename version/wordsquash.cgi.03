#!/usr/bin/perl -w

# written by andrewt@cse.unsw.edu.au April 2011
# as a starting point for COMP2041/9041 assignment 2
# http://cgi.cse.unsw.edu.au/~cs2041/11s1/wordsquash/
# Its a crude implementation which provides some basic features
# You will need to modify and add to this code.
# This codes has bugs & security holes

use CGI qw/:all/;
use CGI::Carp qw(fatalsToBrowser warningsToBrowser);
use List::Util qw/max/;

sub action_list_blogs();
sub action_display_blog();
sub create_blog();
sub save_posting();
sub markup_to_HTML($);
sub get_html_template($);
sub read_file($);
sub write_file($$);
sub check_post_title_exists($);

# This HTML could be in a template file but it assists debugging to have it output ASAP
print header,"<html><head><title>WordSquash</title></head><body>\n";
# Leave parameters in a HTML comment for debugging
print "<!-- ".join(",", map({"$_='".param($_)."'"} param()))."-->\n";

print join(",", map({"$_='".param($_)."'"} param())),"<p>";

my $action = param('action') || 'login';
my $blog = param('blog') || '';
my $post = param('post') || '';
my $postContent = param('postContent') || '';
my $user_name = param('username') || '';
$blog =~ s/[^a-zA-Z0-9\-]//g;



$data_dir = "./data";
mkdir $data_dir if !-d $data_dir;

my %attributes = (
	URL => url(),
	BLOG_HOST_NAME => WordSquash,
	BLOG => $blog,
	POST_TITLE =>$post,
	POST_CONTENT =>$postContent,
	USER =>$user_name,
	BLOG_TITLE => param(new_blog_title) || read_file("$data_dir/$blog.blog_title")
	
);


print("blog = $blog  BLOG_TITLE = $attributes{BLOG_TITLE}");

# Possible actions are: list_blogs, new_blog, display_blog, new_posting
# For every action:
# 1) HTML is generated from $action.start.template
# 2) the subroutine action_$action is called if its exists
# 3) HTML is generated from $action.end.template

print get_html_template("$action.start.template");
&{"action_$action"}() if defined &{"action_$action"};
print get_html_template("$action.end.template");
print "</body></html>\n";
exit(0);

sub action_login() {
print"<p>action_login<p>";
print"<a href='$URL?blog=$BLOG&action=register'>Register</a>"
}

sub action_register() {
print"action_register<p>";
}

sub action_login_result() {
     print"<p>action_result<p>";
     print join(",", map({"$_='".param($_)."'"} param())),"<p>";
       if (!check_password_correct(param(username))) {
	     print "not valid name and password<p>";
	     print"<a href='$URL?action=login'>Try again</a>";
         
       }else{
         print "<p>login successful<p>";
         print"<input type='hidden' name='action' value='list_blogs'>";
         print"<input type='hidden' name='username' value= param(username)>";
         param('username',$user_name);

         print"<a href='$URL?action=list_blogs&username=$user_name'>View Blogs</a>"; 
    }
}

sub action_regist_result() {
print"action_regist_result<p>";
	if (param(username) ne '' && param(password) ne ''&& param(email) ne ''){  #TODO email not same
	    save_regist();
	    print "<p>regist successful<p>";
	    print "<p><a href='$URL?action=login'>Login</a><br>";
	}else{
	    print"(regist failed) missing or conflict plz Register again<p>";
	    print"<a href='$URL?blog=$BLOG&action=register'>Register Again</a>"
	}
}


# List blogs
sub action_list_blogs() {
print"action_list_blogs<p>";

	foreach my $blog (sort glob " $data_dir/*.blog_title") {
	
		($attributes{BLOG} = $blog) =~ s/\.blog_title$//;		       
		($attributes{BLOG} = $attributes{BLOG}) =~ s/$data_dir\///;
		 $attributes{USER} = $user_name;
		            
		$attributes{BLOG_TITLE} = read_file("$blog");
		print get_html_template('list_blogs.blog.template');
		
	}
	print "</ul><p><a href='$URL?blog=$BLOG&action=new_blog&username=$user_name'>Create a new blog</a><br>";

	

}

# Display a blog's contents
sub action_display_blog() {
print"action_display_blog<p>\n";

	create_blog() if (defined param(new_blog_title));
	save_posting() if defined param(new_posting_contents);
    save_edit_posting() if defined param(edit_posting_contents);
    

	foreach my $post (sort glob "$data_dir/$blog.*.post") {

		$attributes{POST_TITLE} = read_file("${post}_title");       
		$attributes{POST_CONTENT} = markup_to_HTML(read_file($post));
		
		print get_html_template("display_blog.post.template");

	}
}

sub create_blog() {
print"create_blog<p>\n";
	write_file("$data_dir/$blog.blog_title", param(new_blog_title));
}

sub save_regist(){
print"save_regist<p>";
    my $user_name = param(username);
    
	my $file = sprintf "$user_name.information";


    if(!check_user_name_exists(param(username))){
	    write_file("$data_dir/$file", param(password));
	    write_file("$data_dir/${file}_email", param(email));	    
	}else{
        print "<p>username already exist change another one<p>";
        print "<p><a href='$URL?action=register'>Register again</a><br>";
		exit(0);		
	}

}

sub save_posting() {
print"save_posting<p>";
	my $last_post = max(map(/(\d+).post$/, glob("$data_dir/$blog.*.post")));
print"last_post = $last_post<p>";
	my $file = sprintf "$blog.%d.post", ($last_post || 0) + 1;
print"file = $file<p>";

    if(!check_post_title_exists(param(new_posting_title))){
	    write_file("$data_dir/$file", param(new_posting_contents));
	    write_file("$data_dir/${file}_title", param(new_posting_title));
	}else{
	    $attributes{POST_TITLE} = param(new_posting_contents);       
		$attributes{POST_CONTENT} = param(new_posting_title);
		print get_html_template("rename.template");
		exit(0);		
	}
}


sub save_edit_posting() {
#TODO
    my $post = $attributes{POST_TITLE};
    foreach my $temp (sort glob "$data_dir/$blog.*.post_title") {
        my $buffer = markup_to_HTML(read_file("${temp}"));
        if ($post =~ $buffer){
           $temp =~ s/_title$//;
           write_file("${temp}", param(edit_posting_contents));
		}
    }		
}


sub action_edit_posting() {

    $attributes{POST_TITLE} = $post;
    
    foreach my $temp (sort glob "$data_dir/$blog.*.post_title") {
        my $buffer = markup_to_HTML(read_file("${temp}"));
        if ($post =~ $buffer){
           $temp =~ s/_title$//;
		   $attributes{POST_CONTENT} = markup_to_HTML(read_file("${temp}"));
		}
    }		
    print get_html_template("edit_posting.post.template");
}

sub check_post_title_exists($) {
    my ($title) = @_;
    foreach my $temp (sort glob "$data_dir/$blog.*.post_title") {
        my $buffer = markup_to_HTML(read_file("${temp}"));
        if ($title =~ /^$buffer$/){
            return 1;     
        }
	}
    return 0;
}


sub check_user_name_exists($) {
    my ($user_name) = @_;
    foreach my $temp (sort glob "$data_dir/*.information") {        
        $temp =~ s/\.\/data\///;
        $temp =~ s/\.information//;
        if ($user_name =~ /^$temp$/){
            return 1;     
        }
	}
    return 0;
}

sub check_password_correct($) {
    my ($user_name) = @_;

    my $password = read_file("$data_dir/$user_name.information");

    if ($password = param(password)){
        return 1;
    }
    
    return 0;
}


sub action_comment_posting() {

    save_comment() if defined param(new_comment);
    save_edit_posting() if defined param(edit_comment);
   
   print"Thats comment page<p>";
    
   foreach my $comment (sort glob "$data_dir/$blog.$post.*.comment") {

		$attributes{COMMENT} = markup_to_HTML(read_file($comment));	

		print get_html_template("display_comment.post.template");
	}
}

sub save_comment(){

print"save_comment<p>";
	my $last_comment = max(map(/(\d+).comment$/, glob("$data_dir/$blog.$post.*.comment")));                                                                                     
	my $file = sprintf "$blog.$post.%d.comment",($last_comment || 0) + 1;
	write_file("$data_dir/$file", param(new_comment));		
}


# convert markup language to HTML
# Markup language is http://en.wikipedia.org/wiki/BBCode 
sub markup_to_HTML($) {

	my ($text) = @_;
	$text =~ s/\[(\/?[bius])\]/<$1>/gi;
	$text =~ s/\[(\/?(url|img|quote|code|table|tr|td))\]/<$1>/gi;
	$text =~ s/\[size=(\d+)\]([^\[]*)\[\/size\]/<span style="font-size:$1px">$2<\/span>/gi; 


	$text =~ s/\[color=#?(\w{2}\d{4})\]([^\[]*)\[\/color\]/<span style="color:#$1">$2<\/span><font color="#$1">$2<\/font>/gi;
	if ($text =~ /\[color=(\w+)\]([^\[]*)\[\/color\]/i){
		$a = "FF0000";
		$text =~ s/\[color=(\w+)\]([^\[]*)\[\/color\]/<span style="color:#$a">$2<\/span><font color="#$a">$2<\/font>/gi;
	}                                    #To-do this is just red color not yet implement the others, need a table of hex then implement them.

	$text =~ s/\[\*\]([^\[]*)/<li>$1<\/li>/gi; 
	$text =~ s/\[\/list\]/<\/ul>/gi;
	$text =~ s/\[list\]/<ul>/gi;  
											  #To_do faces 
											  #To_do Users should not be permitted to directly enter HTML. 
	return $text;
}


# read a template and replace any occurences of $identifier with $attributes{$identifier}
sub get_html_template($) {
	my ($file) = @_;
	return "<p><font color=\"white\"><b>MISSING TEMPLATE BUT Thats allright $file</b></font><p>" if !-r $file;
	my $html = read_file($file);
	$html =~ s/\$(\w+)/defined $attributes{$1} ? $attributes{$1} : "\$$1"/eg;
	return  "<!-- $file begin -->\n$html<!-- $file end -->\n";
}

sub read_file($) {
	my ($file) = @_;
    open(my $f, '<', $file) or return undef;
    return do {local $/; <$f>}
}

sub write_file($$) {
	my ($file, $contents) = @_;
    open my $f, '>', $file or die "Can not write '$file': $!";
    print $f $contents if defined $f;
}
